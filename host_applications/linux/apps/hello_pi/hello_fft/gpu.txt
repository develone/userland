https://petewarden.com/2014/08/07/how-to-optimize-raspberry-pi-code-using-its-gpu/
Pete Warden's blog

https://ultibo.org/forum/viewtopic.php?f=9&t=290
by Ultibo » Thu Sep 15, 2016 12:20 am

If you look at the /hello_fft/mailbox.c file you will see use of mailbox functions for mem_alloc, mem_free, mem_lock, execute_code 
and qpu_enable etc. These functions are mostly all available already in Ultibo through the mailbox interface. If you look in the 
Platform unit you will find GPUMemoryAllocate(), GPUMemoryRelease(), GPUMemoryLock() and GPUExecuteCode() etc which are calling 
the same mailbox functions used above.


The .hex files in the /hello_fft/hex folder seem to be the prebuilt binary versions of each of the files in the /hello_fft/qasm folder and only need to be copied to a block of memory allocated by the GPU before calling the appropriate function to ask it to execute the code.
Need to create the libs
/opt/vc/src/hello_pi/libs/vgfont/libvgfont.a
/opt/vc/src/hello_pi/libs/ilclient/libilclient.a

~/userland/host_applications/linux/apps/hello_pi/libs/ilclient $ make
~/userland/host_applications/linux/apps/hello_pi/libs/vgfont $ make

Nedd to create the folders where the libs

sudo mkdir -p /opt/vc/src/hello_pi/libs/vgfont
sudo mkdir -p /opt/vc/src/hello_pi/libs/ilclient

sudo cp  /home/pi/userland/host_applications/linux/apps/hello_pi/libs/ilclient/* /opt/vc/src/hello_pi/libs/ilclient/
sudo cp  /home/pi/userland/host_applications/linux/apps/hello_pi/libs/vgfont/* /opt/vc/src/hello_pi/libs/vgfont/

~/userland/host_applications/linux/apps/hello_pi/hello_teapot
make
sudo ./hello_teapot.bin

This required increasing the GPU Memory from 64 to 128
 
Re: programming gpu
Postby develone » Tue Apr 18, 2017 5:55 am
Hello All,
I did the hello_teapot example just required a make
pi@raspberrypi3:~/userland/host_applications/linux/apps/hello_pi/hello_teapot


This required increasing the GPU Memory from 64 to 128. This is quite impressive what the RPi can do.

  unsigned long int   	  	Longword
  float   	  				Single
  double   	  				Double 	  64-bit 
05/08/17

Location: Australia
Contact: Contact Ultibo
Re: Audio + VC4 assembly FFT
Unread postby Ultibo » Mon May 08, 2017 3:28 am
Hi develone,

develone wrote:
Any and all help is apprecaited.

You seem to have the Pascal declarations of the functions pretty much correct, in order to allow them to be called by the C code they need to be made public and also need to be declared with the C calling convention.

For example, if I take the mem_alloc function from your umailbox.pas unit the current declaration looks like this:
Code: Select all
function mem_alloc(file_desc:Integer; size, align, flags:Longword):Longword;

To support calling from C it should look like this:
Code: Select all
function mem_alloc(file_desc:Integer; size, align, flags:Longword):Longword; cdecl; public name 'mem_alloc';

The cdecl keyword gives the correct calling convention and the public name keyword makes it visible to external code.

Most of these mailbox functions are already available in the Platform unit, so what you need to do (except for a couple that are missing) is simply to make those available with the correct name and C calling convention.

Taking the mem_alloc example again, this is what the implementation part would look like in order to expose the existing function from Ultibo:

Code: Select all
function mem_alloc(file_desc:Integer; size, align, flags:Longword):Longword; cdecl;
begin
   Result := GPUMemoryAllocate(size, align, flags);
end;

So in essence this is just creating a wrapper that allows C to call the Pascal functions.

As per my earlier post, the qpu_enable and execute_qpu are not currently present in Ultibo but using the existing functions and the mailbox.c code from hello_fft it should be possible to create Pascal implementations of those as well. See the RPi3GPUMemoryAllocate, RPi3GPUMemoryRelease and RPi3GPUMemoryLock functions in the PlatformRPi3 unit for examples.

PS. The one function you don't need to change the implementation of is mbox_open which is just a dummy as you have it already, but you do still need to fix the declaration to be cdecl and public.
